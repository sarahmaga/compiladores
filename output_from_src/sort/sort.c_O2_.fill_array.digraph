digraph "CFG for 'fill_array' function" {
	label="CFG for 'fill_array' function";

	Node0xf93b30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%1:\l  store i64 1, i64* @rand_nxt, align 8, !tbaa !5\l  %2 = icmp eq i64 %0, 0\l  br i1 %2, label %75, label %3\l|{<s0>T|<s1>F}}"];
	Node0xf93b30:s0 -> Node0xf85cd0;
	Node0xf93b30:s1 -> Node0xf95c80;
	Node0xf95c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e3d9d370",label="{%3:\l3:                                                \l  %4 = load i64*, i64** @array, align 8, !tbaa !9\l  %5 = icmp ult i64 %0, 4\l  br i1 %5, label %68, label %6\l|{<s0>T|<s1>F}}"];
	Node0xf95c80:s0 -> Node0xf85c30;
	Node0xf95c80:s1 -> Node0xf85a50;
	Node0xf85a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%6:\l6:                                                \l  %7 = and i64 %0, -4\l  %8 = add i64 %7, -4\l  %9 = lshr exact i64 %8, 2\l  %10 = add nuw nsw i64 %9, 1\l  %11 = and i64 %10, 3\l  %12 = icmp ult i64 %8, 12\l  br i1 %12, label %49, label %13\l|{<s0>T|<s1>F}}"];
	Node0xf85a50:s0 -> Node0xf85b40;
	Node0xf85a50:s1 -> Node0xf85aa0;
	Node0xf85aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#a5c3fe70",label="{%13:\l13:                                               \l  %14 = and i64 %10, 9223372036854775804\l  br label %15\l}"];
	Node0xf85aa0 -> Node0xf85af0;
	Node0xf85af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e8765c70",label="{%15:\l15:                                               \l  %16 = phi i64 [ 0, %13 ], [ %45, %15 ]\l  %17 = phi \<2 x i64\> [ \<i64 0, i64 1\>, %13 ], [ %46, %15 ]\l  %18 = phi i64 [ 0, %13 ], [ %47, %15 ]\l  %19 = add \<2 x i64\> %17, \<i64 2, i64 2\>\l  %20 = getelementptr inbounds i64, i64* %4, i64 %16\l  %21 = bitcast i64* %20 to \<2 x i64\>*\l  store \<2 x i64\> %17, \<2 x i64\>* %21, align 8, !tbaa !5\l  %22 = getelementptr inbounds i64, i64* %20, i64 2\l  %23 = bitcast i64* %22 to \<2 x i64\>*\l  store \<2 x i64\> %19, \<2 x i64\>* %23, align 8, !tbaa !5\l  %24 = or i64 %16, 4\l  %25 = add \<2 x i64\> %17, \<i64 4, i64 4\>\l  %26 = add \<2 x i64\> %17, \<i64 6, i64 6\>\l  %27 = getelementptr inbounds i64, i64* %4, i64 %24\l  %28 = bitcast i64* %27 to \<2 x i64\>*\l  store \<2 x i64\> %25, \<2 x i64\>* %28, align 8, !tbaa !5\l  %29 = getelementptr inbounds i64, i64* %27, i64 2\l  %30 = bitcast i64* %29 to \<2 x i64\>*\l  store \<2 x i64\> %26, \<2 x i64\>* %30, align 8, !tbaa !5\l  %31 = or i64 %16, 8\l  %32 = add \<2 x i64\> %17, \<i64 8, i64 8\>\l  %33 = add \<2 x i64\> %17, \<i64 10, i64 10\>\l  %34 = getelementptr inbounds i64, i64* %4, i64 %31\l  %35 = bitcast i64* %34 to \<2 x i64\>*\l  store \<2 x i64\> %32, \<2 x i64\>* %35, align 8, !tbaa !5\l  %36 = getelementptr inbounds i64, i64* %34, i64 2\l  %37 = bitcast i64* %36 to \<2 x i64\>*\l  store \<2 x i64\> %33, \<2 x i64\>* %37, align 8, !tbaa !5\l  %38 = or i64 %16, 12\l  %39 = add \<2 x i64\> %17, \<i64 12, i64 12\>\l  %40 = add \<2 x i64\> %17, \<i64 14, i64 14\>\l  %41 = getelementptr inbounds i64, i64* %4, i64 %38\l  %42 = bitcast i64* %41 to \<2 x i64\>*\l  store \<2 x i64\> %39, \<2 x i64\>* %42, align 8, !tbaa !5\l  %43 = getelementptr inbounds i64, i64* %41, i64 2\l  %44 = bitcast i64* %43 to \<2 x i64\>*\l  store \<2 x i64\> %40, \<2 x i64\>* %44, align 8, !tbaa !5\l  %45 = add nuw i64 %16, 16\l  %46 = add \<2 x i64\> %17, \<i64 16, i64 16\>\l  %47 = add nuw i64 %18, 4\l  %48 = icmp eq i64 %47, %14\l  br i1 %48, label %49, label %15, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0xf85af0:s0 -> Node0xf85b40;
	Node0xf85af0:s1 -> Node0xf85af0;
	Node0xf85b40 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%49:\l49:                                               \l  %50 = phi i64 [ 0, %6 ], [ %45, %15 ]\l  %51 = phi \<2 x i64\> [ \<i64 0, i64 1\>, %6 ], [ %46, %15 ]\l  %52 = icmp eq i64 %11, 0\l  br i1 %52, label %66, label %53\l|{<s0>T|<s1>F}}"];
	Node0xf85b40:s0 -> Node0xf85be0;
	Node0xf85b40:s1 -> Node0xf85b90;
	Node0xf85b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#e1675170",label="{%53:\l53:                                               \l  %54 = phi i64 [ %62, %53 ], [ %50, %49 ]\l  %55 = phi \<2 x i64\> [ %63, %53 ], [ %51, %49 ]\l  %56 = phi i64 [ %64, %53 ], [ 0, %49 ]\l  %57 = add \<2 x i64\> %55, \<i64 2, i64 2\>\l  %58 = getelementptr inbounds i64, i64* %4, i64 %54\l  %59 = bitcast i64* %58 to \<2 x i64\>*\l  store \<2 x i64\> %55, \<2 x i64\>* %59, align 8, !tbaa !5\l  %60 = getelementptr inbounds i64, i64* %58, i64 2\l  %61 = bitcast i64* %60 to \<2 x i64\>*\l  store \<2 x i64\> %57, \<2 x i64\>* %61, align 8, !tbaa !5\l  %62 = add nuw i64 %54, 4\l  %63 = add \<2 x i64\> %55, \<i64 4, i64 4\>\l  %64 = add i64 %56, 1\l  %65 = icmp eq i64 %64, %11\l  br i1 %65, label %66, label %53, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0xf85b90:s0 -> Node0xf85be0;
	Node0xf85b90:s1 -> Node0xf85b90;
	Node0xf85be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#c5d6f270",label="{%66:\l66:                                               \l  %67 = icmp eq i64 %7, %0\l  br i1 %67, label %75, label %68\l|{<s0>T|<s1>F}}"];
	Node0xf85be0:s0 -> Node0xf85cd0;
	Node0xf85be0:s1 -> Node0xf85c30;
	Node0xf85c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%68:\l68:                                               \l  %69 = phi i64 [ 0, %3 ], [ %7, %66 ]\l  br label %70\l}"];
	Node0xf85c30 -> Node0xf85c80;
	Node0xf85c80 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%70:\l70:                                               \l  %71 = phi i64 [ %73, %70 ], [ %69, %68 ]\l  %72 = getelementptr inbounds i64, i64* %4, i64 %71\l  store i64 %71, i64* %72, align 8, !tbaa !5\l  %73 = add nuw i64 %71, 1\l  %74 = icmp eq i64 %73, %0\l  br i1 %74, label %75, label %70, !llvm.loop !16\l|{<s0>T|<s1>F}}"];
	Node0xf85c80:s0 -> Node0xf85cd0;
	Node0xf85c80:s1 -> Node0xf85c80;
	Node0xf85cd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f1ccb870",label="{%75:\l75:                                               \l  ret void\l}"];
}
