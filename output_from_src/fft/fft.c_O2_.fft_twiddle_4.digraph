digraph "CFG for 'fft_twiddle_4' function" {
	label="CFG for 'fft_twiddle_4' function";

	Node0x2011040 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%8:\l  %9 = sub nsw i32 %1, %0\l  %10 = icmp slt i32 %9, 128\l  br i1 %10, label %11, label %113\l|{<s0>T|<s1>F}}"];
	Node0x2011040:s0 -> Node0x2011090;
	Node0x2011040:s1 -> Node0x2011180;
	Node0x2011090 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%11:\l11:                                               \l  %12 = phi i32 [ %0, %8 ], [ %116, %113 ]\l  %13 = icmp slt i32 %12, %1\l  br i1 %13, label %14, label %119\l|{<s0>T|<s1>F}}"];
	Node0x2011090:s0 -> Node0x20110e0;
	Node0x2011090:s1 -> Node0x20111d0;
	Node0x20110e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b9d0f970",label="{%14:\l14:                                               \l  %15 = sext i32 %12 to i64\l  %16 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %3, i64 %15\l  %17 = mul i32 %12, %6\l  %18 = shl nsw i32 %7, 1\l  %19 = sext i32 %18 to i64\l  %20 = sext i32 %7 to i64\l  %21 = mul nsw i32 %7, 3\l  %22 = sext i32 %21 to i64\l  %23 = sext i32 %17 to i64\l  %24 = sext i32 %6 to i64\l  %25 = sext i32 %1 to i64\l  br label %26\l}"];
	Node0x20110e0 -> Node0x2011130;
	Node0x2011130 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%26:\l26:                                               \l  %27 = phi i64 [ %15, %14 ], [ %109, %26 ]\l  %28 = phi i64 [ %23, %14 ], [ %110, %26 ]\l  %29 = phi %struct.COMPLEX* [ %16, %14 ], [ %111, %26 ]\l  %30 = trunc i64 %28 to i32\l  %31 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %2, i64 %27\l  %32 = bitcast %struct.COMPLEX* %31 to \<2 x double\>*\l  %33 = load \<2 x double\>, \<2 x double\>* %32, align 8, !tbaa !5\l  %34 = shl nsw i32 %30, 1\l  %35 = sext i32 %34 to i64\l  %36 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %4, i64 %35,\l... i32 0\l  %37 = bitcast double* %36 to \<2 x double\>*\l  %38 = load \<2 x double\>, \<2 x double\>* %37, align 8, !tbaa !5\l  %39 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %31, i64 %19\l  %40 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %39, i64 0,\l... i32 0\l  %41 = load double, double* %40, align 8, !tbaa !9\l  %42 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %39, i64 0,\l... i32 1\l  %43 = load double, double* %42, align 8, !tbaa !11\l  %44 = extractelement \<2 x double\> %38, i64 1\l  %45 = fneg double %44\l  %46 = insertelement \<2 x double\> poison, double %43, i64 0\l  %47 = shufflevector \<2 x double\> %46, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %48 = insertelement \<2 x double\> %38, double %45, i64 1\l  %49 = fmul \<2 x double\> %47, %48\l  %50 = shufflevector \<2 x double\> %49, \<2 x double\> poison, \<2 x i32\> \<i32 1,\l... i32 0\>\l  %51 = insertelement \<2 x double\> poison, double %41, i64 0\l  %52 = shufflevector \<2 x double\> %51, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %53 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %38, \<2 x double\>\l... %52, \<2 x double\> %50)\l  %54 = fadd \<2 x double\> %33, %53\l  %55 = fsub \<2 x double\> %33, %53\l  %56 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %4, i64 %28,\l... i32 0\l  %57 = bitcast double* %56 to \<2 x double\>*\l  %58 = load \<2 x double\>, \<2 x double\>* %57, align 8, !tbaa !5\l  %59 = shufflevector \<2 x double\> %58, \<2 x double\> poison, \<2 x i32\> \<i32 1,\l... i32 0\>\l  %60 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %31, i64 %20\l  %61 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %60, i64 0,\l... i32 0\l  %62 = load double, double* %61, align 8, !tbaa !9\l  %63 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %60, i64 0,\l... i32 1\l  %64 = load double, double* %63, align 8, !tbaa !11\l  %65 = extractelement \<2 x double\> %58, i64 1\l  %66 = fneg double %65\l  %67 = insertelement \<2 x double\> poison, double %64, i64 0\l  %68 = shufflevector \<2 x double\> %67, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %69 = insertelement \<2 x double\> %58, double %66, i64 1\l  %70 = fmul \<2 x double\> %68, %69\l  %71 = insertelement \<2 x double\> poison, double %62, i64 0\l  %72 = shufflevector \<2 x double\> %71, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %73 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %59, \<2 x double\>\l... %72, \<2 x double\> %70)\l  %74 = mul nsw i64 %28, 3\l  %75 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %4, i64 %74,\l... i32 0\l  %76 = bitcast double* %75 to \<2 x double\>*\l  %77 = load \<2 x double\>, \<2 x double\>* %76, align 8, !tbaa !5\l  %78 = shufflevector \<2 x double\> %77, \<2 x double\> poison, \<2 x i32\> \<i32 1,\l... i32 0\>\l  %79 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %31, i64 %22\l  %80 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %79, i64 0,\l... i32 0\l  %81 = load double, double* %80, align 8, !tbaa !9\l  %82 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %79, i64 0,\l... i32 1\l  %83 = load double, double* %82, align 8, !tbaa !11\l  %84 = extractelement \<2 x double\> %77, i64 1\l  %85 = fneg double %84\l  %86 = insertelement \<2 x double\> poison, double %83, i64 0\l  %87 = shufflevector \<2 x double\> %86, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %88 = insertelement \<2 x double\> %77, double %85, i64 1\l  %89 = fmul \<2 x double\> %87, %88\l  %90 = insertelement \<2 x double\> poison, double %81, i64 0\l  %91 = shufflevector \<2 x double\> %90, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %92 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %78, \<2 x double\>\l... %91, \<2 x double\> %89)\l  %93 = fadd \<2 x double\> %73, %92\l  %94 = shufflevector \<2 x double\> %93, \<2 x double\> poison, \<2 x i32\> \<i32 1,\l... i32 0\>\l  %95 = fsub \<2 x double\> %73, %92\l  %96 = fadd \<2 x double\> %54, %94\l  %97 = bitcast %struct.COMPLEX* %29 to \<2 x double\>*\l  store \<2 x double\> %96, \<2 x double\>* %97, align 8, !tbaa !5\l  %98 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %29, i64 %19,\l... i32 0\l  %99 = fsub \<2 x double\> %54, %94\l  %100 = bitcast double* %98 to \<2 x double\>*\l  store \<2 x double\> %99, \<2 x double\>* %100, align 8, !tbaa !5\l  %101 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %29, i64\l... %20, i32 0\l  %102 = fadd \<2 x double\> %55, %95\l  %103 = fsub \<2 x double\> %55, %95\l  %104 = shufflevector \<2 x double\> %102, \<2 x double\> %103, \<2 x i32\> \<i32 0,\l... i32 3\>\l  %105 = bitcast double* %101 to \<2 x double\>*\l  store \<2 x double\> %104, \<2 x double\>* %105, align 8, !tbaa !5\l  %106 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %29, i64\l... %22, i32 0\l  %107 = shufflevector \<2 x double\> %103, \<2 x double\> %102, \<2 x i32\> \<i32 0,\l... i32 3\>\l  %108 = bitcast double* %106 to \<2 x double\>*\l  store \<2 x double\> %107, \<2 x double\>* %108, align 8, !tbaa !5\l  %109 = add nsw i64 %27, 1\l  %110 = add i64 %28, %24\l  %111 = getelementptr inbounds %struct.COMPLEX, %struct.COMPLEX* %29, i64 1\l  %112 = icmp eq i64 %109, %25\l  br i1 %112, label %119, label %26, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x2011130:s0 -> Node0x20111d0;
	Node0x2011130:s1 -> Node0x2011130;
	Node0x2011180 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%113:\l113:                                              \l  %114 = phi i32 [ %116, %113 ], [ %0, %8 ]\l  %115 = add nsw i32 %114, %1\l  %116 = sdiv i32 %115, 2\l  tail call void @fft_twiddle_4(i32 noundef %114, i32 noundef %116,\l... %struct.COMPLEX* noundef %2, %struct.COMPLEX* noundef %3, %struct.COMPLEX*\l... noundef %4, i32 noundef %5, i32 noundef %6, i32 noundef %7)\l  %117 = sub nsw i32 %1, %116\l  %118 = icmp slt i32 %117, 128\l  br i1 %118, label %11, label %113\l|{<s0>T|<s1>F}}"];
	Node0x2011180:s0 -> Node0x2011090;
	Node0x2011180:s1 -> Node0x2011180;
	Node0x20111d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#dedcdb70",label="{%119:\l119:                                              \l  ret void\l}"];
}
