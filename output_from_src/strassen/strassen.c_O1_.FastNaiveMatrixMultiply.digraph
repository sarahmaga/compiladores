digraph "CFG for 'FastNaiveMatrixMultiply' function" {
	label="CFG for 'FastNaiveMatrixMultiply' function";

	Node0xfc7810 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%7:\l  %8 = shl i32 %6, 3\l  %9 = zext i32 %8 to i64\l  %10 = shl i32 %5, 3\l  %11 = zext i32 %10 to i64\l  %12 = shl i32 %3, 3\l  %13 = zext i32 %12 to i64\l  %14 = sub i32 %4, %3\l  %15 = shl i32 %14, 3\l  %16 = zext i32 %15 to i64\l  %17 = icmp eq i32 %3, 0\l  br i1 %17, label %128, label %18\l|{<s0>T|<s1>F}}"];
	Node0xfc7810:s0 -> Node0xfc8450;
	Node0xfc7810:s1 -> Node0xfc8270;
	Node0xfc8270 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%18:\l18:                                               \l  %19 = icmp eq i32 %3, 1\l  %20 = zext i32 %3 to i64\l  br label %21\l}"];
	Node0xfc8270 -> Node0xfc82c0;
	Node0xfc82c0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%21:\l21:                                               \l  %22 = phi double* [ %0, %18 ], [ %125, %120 ]\l  %23 = phi double* [ %1, %18 ], [ %122, %120 ]\l  %24 = phi i32 [ 0, %18 ], [ %126, %120 ]\l  br label %25\l}"];
	Node0xfc82c0 -> Node0xfc8310;
	Node0xfc8310 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%25:\l25:                                               \l  %26 = phi i64 [ 0, %21 ], [ %118, %97 ]\l  %27 = phi double* [ %22, %21 ], [ %117, %97 ]\l  %28 = phi double* [ %23, %21 ], [ %109, %97 ]\l  %29 = getelementptr inbounds double, double* %2, i64 %26\l  %30 = load double, double* %28, align 8, !tbaa !5\l  %31 = load double, double* %29, align 8, !tbaa !5\l  %32 = fmul double %30, %31\l  %33 = getelementptr inbounds double, double* %29, i64 1\l  %34 = load double, double* %33, align 8, !tbaa !5\l  %35 = fmul double %30, %34\l  %36 = getelementptr inbounds double, double* %29, i64 2\l  %37 = load double, double* %36, align 8, !tbaa !5\l  %38 = fmul double %30, %37\l  %39 = getelementptr inbounds double, double* %29, i64 3\l  %40 = load double, double* %39, align 8, !tbaa !5\l  %41 = fmul double %30, %40\l  %42 = getelementptr inbounds double, double* %29, i64 4\l  %43 = load double, double* %42, align 8, !tbaa !5\l  %44 = fmul double %30, %43\l  %45 = getelementptr inbounds double, double* %29, i64 5\l  %46 = load double, double* %45, align 8, !tbaa !5\l  %47 = fmul double %30, %46\l  %48 = getelementptr inbounds double, double* %29, i64 6\l  %49 = load double, double* %48, align 8, !tbaa !5\l  %50 = fmul double %30, %49\l  %51 = getelementptr inbounds double, double* %29, i64 7\l  %52 = load double, double* %51, align 8, !tbaa !5\l  %53 = fmul double %30, %52\l  %54 = getelementptr inbounds double, double* %28, i64 1\l  br i1 %19, label %97, label %55\l|{<s0>T|<s1>F}}"];
	Node0xfc8310:s0 -> Node0xfc83b0;
	Node0xfc8310:s1 -> Node0xfc8360;
	Node0xfc8360 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%55:\l55:                                               \l  %56 = phi double* [ %95, %55 ], [ %54, %25 ]\l  %57 = phi i32 [ %94, %55 ], [ 1, %25 ]\l  %58 = phi double [ %93, %55 ], [ %53, %25 ]\l  %59 = phi double [ %90, %55 ], [ %50, %25 ]\l  %60 = phi double [ %87, %55 ], [ %47, %25 ]\l  %61 = phi double [ %84, %55 ], [ %44, %25 ]\l  %62 = phi double [ %81, %55 ], [ %41, %25 ]\l  %63 = phi double [ %78, %55 ], [ %38, %25 ]\l  %64 = phi double [ %75, %55 ], [ %35, %25 ]\l  %65 = phi double [ %72, %55 ], [ %32, %25 ]\l  %66 = phi double* [ %70, %55 ], [ %29, %25 ]\l  %67 = load double, double* %56, align 8, !tbaa !5\l  %68 = ptrtoint double* %66 to i64\l  %69 = add i64 %68, %9\l  %70 = inttoptr i64 %69 to double*\l  %71 = load double, double* %70, align 8, !tbaa !5\l  %72 = call double @llvm.fmuladd.f64(double %67, double %71, double %65)\l  %73 = getelementptr inbounds double, double* %70, i64 1\l  %74 = load double, double* %73, align 8, !tbaa !5\l  %75 = call double @llvm.fmuladd.f64(double %67, double %74, double %64)\l  %76 = getelementptr inbounds double, double* %70, i64 2\l  %77 = load double, double* %76, align 8, !tbaa !5\l  %78 = call double @llvm.fmuladd.f64(double %67, double %77, double %63)\l  %79 = getelementptr inbounds double, double* %70, i64 3\l  %80 = load double, double* %79, align 8, !tbaa !5\l  %81 = call double @llvm.fmuladd.f64(double %67, double %80, double %62)\l  %82 = getelementptr inbounds double, double* %70, i64 4\l  %83 = load double, double* %82, align 8, !tbaa !5\l  %84 = call double @llvm.fmuladd.f64(double %67, double %83, double %61)\l  %85 = getelementptr inbounds double, double* %70, i64 5\l  %86 = load double, double* %85, align 8, !tbaa !5\l  %87 = call double @llvm.fmuladd.f64(double %67, double %86, double %60)\l  %88 = getelementptr inbounds double, double* %70, i64 6\l  %89 = load double, double* %88, align 8, !tbaa !5\l  %90 = call double @llvm.fmuladd.f64(double %67, double %89, double %59)\l  %91 = getelementptr inbounds double, double* %70, i64 7\l  %92 = load double, double* %91, align 8, !tbaa !5\l  %93 = call double @llvm.fmuladd.f64(double %67, double %92, double %58)\l  %94 = add nuw i32 %57, 1\l  %95 = getelementptr inbounds double, double* %56, i64 1\l  %96 = icmp eq i32 %94, %3\l  br i1 %96, label %97, label %55, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0xfc8360:s0 -> Node0xfc83b0;
	Node0xfc8360:s1 -> Node0xfc8360;
	Node0xfc83b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%97:\l97:                                               \l  %98 = phi double [ %32, %25 ], [ %72, %55 ]\l  %99 = phi double [ %35, %25 ], [ %75, %55 ]\l  %100 = phi double [ %38, %25 ], [ %78, %55 ]\l  %101 = phi double [ %41, %25 ], [ %81, %55 ]\l  %102 = phi double [ %44, %25 ], [ %84, %55 ]\l  %103 = phi double [ %47, %25 ], [ %87, %55 ]\l  %104 = phi double [ %50, %25 ], [ %90, %55 ]\l  %105 = phi double [ %53, %25 ], [ %93, %55 ]\l  %106 = phi double* [ %54, %25 ], [ %95, %55 ]\l  %107 = ptrtoint double* %106 to i64\l  %108 = sub i64 %107, %13\l  %109 = inttoptr i64 %108 to double*\l  store double %98, double* %27, align 8, !tbaa !5\l  %110 = getelementptr inbounds double, double* %27, i64 1\l  store double %99, double* %110, align 8, !tbaa !5\l  %111 = getelementptr inbounds double, double* %27, i64 2\l  store double %100, double* %111, align 8, !tbaa !5\l  %112 = getelementptr inbounds double, double* %27, i64 3\l  store double %101, double* %112, align 8, !tbaa !5\l  %113 = getelementptr inbounds double, double* %27, i64 4\l  store double %102, double* %113, align 8, !tbaa !5\l  %114 = getelementptr inbounds double, double* %27, i64 5\l  store double %103, double* %114, align 8, !tbaa !5\l  %115 = getelementptr inbounds double, double* %27, i64 6\l  store double %104, double* %115, align 8, !tbaa !5\l  %116 = getelementptr inbounds double, double* %27, i64 7\l  store double %105, double* %116, align 8, !tbaa !5\l  %117 = getelementptr inbounds double, double* %27, i64 8\l  %118 = add nuw nsw i64 %26, 8\l  %119 = icmp ult i64 %118, %20\l  br i1 %119, label %25, label %120, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0xfc83b0:s0 -> Node0xfc8310;
	Node0xfc83b0:s1 -> Node0xfc8400;
	Node0xfc8400 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%120:\l120:                                              \l  %121 = add i64 %108, %11\l  %122 = inttoptr i64 %121 to double*\l  %123 = ptrtoint double* %117 to i64\l  %124 = add i64 %123, %16\l  %125 = inttoptr i64 %124 to double*\l  %126 = add nuw i32 %24, 1\l  %127 = icmp eq i32 %126, %3\l  br i1 %127, label %128, label %21, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0xfc8400:s0 -> Node0xfc8450;
	Node0xfc8400:s1 -> Node0xfc82c0;
	Node0xfc8450 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%128:\l128:                                              \l  ret void\l}"];
}
