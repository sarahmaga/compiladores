digraph "CFG for 'FastAdditiveNaiveMatrixMultiply' function" {
	label="CFG for 'FastAdditiveNaiveMatrixMultiply' function";

	Node0x1552a00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%7:\l  %8 = shl i32 %6, 3\l  %9 = zext i32 %8 to i64\l  %10 = shl i32 %5, 3\l  %11 = zext i32 %10 to i64\l  %12 = shl i32 %3, 3\l  %13 = zext i32 %12 to i64\l  %14 = sub i32 %4, %3\l  %15 = shl i32 %14, 3\l  %16 = zext i32 %15 to i64\l  %17 = icmp eq i32 %3, 0\l  br i1 %17, label %95, label %18\l|{<s0>T|<s1>F}}"];
	Node0x1552a00:s0 -> Node0x1552c30;
	Node0x1552a00:s1 -> Node0x1552a50;
	Node0x1552a50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%18:\l18:                                               \l  %19 = zext i32 %3 to i64\l  br label %20\l}"];
	Node0x1552a50 -> Node0x1552aa0;
	Node0x1552aa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%20:\l20:                                               \l  %21 = phi double* [ %92, %87 ], [ %0, %18 ]\l  %22 = phi double* [ %89, %87 ], [ %1, %18 ]\l  %23 = phi i32 [ %93, %87 ], [ 0, %18 ]\l  br label %24\l}"];
	Node0x1552aa0 -> Node0x1552af0;
	Node0x1552af0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%24:\l24:                                               \l  %25 = phi i64 [ 0, %20 ], [ %85, %72 ]\l  %26 = phi double* [ %21, %20 ], [ %84, %72 ]\l  %27 = phi double* [ %22, %20 ], [ %79, %72 ]\l  %28 = getelementptr inbounds double, double* %2, i64 %25\l  %29 = bitcast double* %26 to \<2 x double\>*\l  %30 = load \<2 x double\>, \<2 x double\>* %29, align 8, !tbaa !5\l  %31 = getelementptr inbounds double, double* %26, i64 2\l  %32 = bitcast double* %31 to \<2 x double\>*\l  %33 = load \<2 x double\>, \<2 x double\>* %32, align 8, !tbaa !5\l  %34 = getelementptr inbounds double, double* %26, i64 4\l  %35 = bitcast double* %34 to \<2 x double\>*\l  %36 = load \<2 x double\>, \<2 x double\>* %35, align 8, !tbaa !5\l  %37 = getelementptr inbounds double, double* %26, i64 6\l  %38 = bitcast double* %37 to \<2 x double\>*\l  %39 = load \<2 x double\>, \<2 x double\>* %38, align 8, !tbaa !5\l  br label %40\l}"];
	Node0x1552af0 -> Node0x1552b40;
	Node0x1552b40 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%40:\l40:                                               \l  %41 = phi i32 [ 0, %24 ], [ %70, %40 ]\l  %42 = phi double* [ %28, %24 ], [ %69, %40 ]\l  %43 = phi double* [ %27, %24 ], [ %48, %40 ]\l  %44 = phi \<2 x double\> [ %30, %24 ], [ %54, %40 ]\l  %45 = phi \<2 x double\> [ %33, %24 ], [ %58, %40 ]\l  %46 = phi \<2 x double\> [ %36, %24 ], [ %62, %40 ]\l  %47 = phi \<2 x double\> [ %39, %24 ], [ %66, %40 ]\l  %48 = getelementptr inbounds double, double* %43, i64 1\l  %49 = load double, double* %43, align 8, !tbaa !5\l  %50 = bitcast double* %42 to \<2 x double\>*\l  %51 = load \<2 x double\>, \<2 x double\>* %50, align 8, !tbaa !5\l  %52 = insertelement \<2 x double\> poison, double %49, i64 0\l  %53 = shufflevector \<2 x double\> %52, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %54 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %53, \<2 x double\>\l... %51, \<2 x double\> %44)\l  %55 = getelementptr inbounds double, double* %42, i64 2\l  %56 = bitcast double* %55 to \<2 x double\>*\l  %57 = load \<2 x double\>, \<2 x double\>* %56, align 8, !tbaa !5\l  %58 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %53, \<2 x double\>\l... %57, \<2 x double\> %45)\l  %59 = getelementptr inbounds double, double* %42, i64 4\l  %60 = bitcast double* %59 to \<2 x double\>*\l  %61 = load \<2 x double\>, \<2 x double\>* %60, align 8, !tbaa !5\l  %62 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %53, \<2 x double\>\l... %61, \<2 x double\> %46)\l  %63 = getelementptr inbounds double, double* %42, i64 6\l  %64 = bitcast double* %63 to \<2 x double\>*\l  %65 = load \<2 x double\>, \<2 x double\>* %64, align 8, !tbaa !5\l  %66 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %53, \<2 x double\>\l... %65, \<2 x double\> %47)\l  %67 = ptrtoint double* %42 to i64\l  %68 = add i64 %67, %9\l  %69 = inttoptr i64 %68 to double*\l  %70 = add nuw i32 %41, 1\l  %71 = icmp eq i32 %70, %3\l  br i1 %71, label %72, label %40, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x1552b40:s0 -> Node0x1552b90;
	Node0x1552b40:s1 -> Node0x1552b40;
	Node0x1552b90 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%72:\l72:                                               \l  %73 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %53, \<2 x double\>\l... %65, \<2 x double\> %47)\l  %74 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %53, \<2 x double\>\l... %61, \<2 x double\> %46)\l  %75 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %53, \<2 x double\>\l... %57, \<2 x double\> %45)\l  %76 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %53, \<2 x double\>\l... %51, \<2 x double\> %44)\l  %77 = ptrtoint double* %48 to i64\l  %78 = sub i64 %77, %13\l  %79 = inttoptr i64 %78 to double*\l  %80 = bitcast double* %26 to \<2 x double\>*\l  store \<2 x double\> %76, \<2 x double\>* %80, align 8, !tbaa !5\l  %81 = bitcast double* %31 to \<2 x double\>*\l  store \<2 x double\> %75, \<2 x double\>* %81, align 8, !tbaa !5\l  %82 = bitcast double* %34 to \<2 x double\>*\l  store \<2 x double\> %74, \<2 x double\>* %82, align 8, !tbaa !5\l  %83 = bitcast double* %37 to \<2 x double\>*\l  store \<2 x double\> %73, \<2 x double\>* %83, align 8, !tbaa !5\l  %84 = getelementptr inbounds double, double* %26, i64 8\l  %85 = add nuw nsw i64 %25, 8\l  %86 = icmp ult i64 %85, %19\l  br i1 %86, label %24, label %87, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x1552b90:s0 -> Node0x1552af0;
	Node0x1552b90:s1 -> Node0x1552be0;
	Node0x1552be0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%87:\l87:                                               \l  %88 = add i64 %78, %11\l  %89 = inttoptr i64 %88 to double*\l  %90 = ptrtoint double* %84 to i64\l  %91 = add i64 %90, %16\l  %92 = inttoptr i64 %91 to double*\l  %93 = add nuw i32 %23, 1\l  %94 = icmp eq i32 %93, %3\l  br i1 %94, label %95, label %20, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x1552be0:s0 -> Node0x1552c30;
	Node0x1552be0:s1 -> Node0x1552aa0;
	Node0x1552c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%95:\l95:                                               \l  ret void\l}"];
}
