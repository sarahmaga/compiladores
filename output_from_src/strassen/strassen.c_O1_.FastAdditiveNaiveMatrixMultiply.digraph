digraph "CFG for 'FastAdditiveNaiveMatrixMultiply' function" {
	label="CFG for 'FastAdditiveNaiveMatrixMultiply' function";

	Node0xa7c930 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%7:\l  %8 = shl i32 %6, 3\l  %9 = zext i32 %8 to i64\l  %10 = shl i32 %5, 3\l  %11 = zext i32 %10 to i64\l  %12 = shl i32 %3, 3\l  %13 = zext i32 %12 to i64\l  %14 = sub i32 %4, %3\l  %15 = shl i32 %14, 3\l  %16 = zext i32 %15 to i64\l  %17 = icmp eq i32 %3, 0\l  br i1 %17, label %101, label %18\l|{<s0>T|<s1>F}}"];
	Node0xa7c930:s0 -> Node0xa7cb60;
	Node0xa7c930:s1 -> Node0xa7c980;
	Node0xa7c980 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%18:\l18:                                               \l  %19 = zext i32 %3 to i64\l  br label %20\l}"];
	Node0xa7c980 -> Node0xa7c9d0;
	Node0xa7c9d0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%20:\l20:                                               \l  %21 = phi double* [ %98, %93 ], [ %0, %18 ]\l  %22 = phi double* [ %95, %93 ], [ %1, %18 ]\l  %23 = phi i32 [ %99, %93 ], [ 0, %18 ]\l  br label %24\l}"];
	Node0xa7c9d0 -> Node0xa7ca20;
	Node0xa7ca20 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%24:\l24:                                               \l  %25 = phi i64 [ 0, %20 ], [ %91, %86 ]\l  %26 = phi double* [ %21, %20 ], [ %90, %86 ]\l  %27 = phi double* [ %22, %20 ], [ %89, %86 ]\l  %28 = getelementptr inbounds double, double* %2, i64 %25\l  %29 = load double, double* %26, align 8, !tbaa !5\l  %30 = getelementptr inbounds double, double* %26, i64 1\l  %31 = load double, double* %30, align 8, !tbaa !5\l  %32 = getelementptr inbounds double, double* %26, i64 2\l  %33 = load double, double* %32, align 8, !tbaa !5\l  %34 = getelementptr inbounds double, double* %26, i64 3\l  %35 = load double, double* %34, align 8, !tbaa !5\l  %36 = getelementptr inbounds double, double* %26, i64 4\l  %37 = load double, double* %36, align 8, !tbaa !5\l  %38 = getelementptr inbounds double, double* %26, i64 5\l  %39 = load double, double* %38, align 8, !tbaa !5\l  %40 = getelementptr inbounds double, double* %26, i64 6\l  %41 = load double, double* %40, align 8, !tbaa !5\l  %42 = getelementptr inbounds double, double* %26, i64 7\l  %43 = load double, double* %42, align 8, !tbaa !5\l  br label %44\l}"];
	Node0xa7ca20 -> Node0xa7ca70;
	Node0xa7ca70 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%44:\l44:                                               \l  %45 = phi i32 [ 0, %24 ], [ %84, %44 ]\l  %46 = phi double [ %43, %24 ], [ %80, %44 ]\l  %47 = phi double [ %41, %24 ], [ %77, %44 ]\l  %48 = phi double [ %39, %24 ], [ %74, %44 ]\l  %49 = phi double [ %37, %24 ], [ %71, %44 ]\l  %50 = phi double [ %35, %24 ], [ %68, %44 ]\l  %51 = phi double [ %33, %24 ], [ %65, %44 ]\l  %52 = phi double [ %31, %24 ], [ %62, %44 ]\l  %53 = phi double [ %29, %24 ], [ %59, %44 ]\l  %54 = phi double* [ %28, %24 ], [ %83, %44 ]\l  %55 = phi double* [ %27, %24 ], [ %56, %44 ]\l  %56 = getelementptr inbounds double, double* %55, i64 1\l  %57 = load double, double* %55, align 8, !tbaa !5\l  %58 = load double, double* %54, align 8, !tbaa !5\l  %59 = call double @llvm.fmuladd.f64(double %57, double %58, double %53)\l  %60 = getelementptr inbounds double, double* %54, i64 1\l  %61 = load double, double* %60, align 8, !tbaa !5\l  %62 = call double @llvm.fmuladd.f64(double %57, double %61, double %52)\l  %63 = getelementptr inbounds double, double* %54, i64 2\l  %64 = load double, double* %63, align 8, !tbaa !5\l  %65 = call double @llvm.fmuladd.f64(double %57, double %64, double %51)\l  %66 = getelementptr inbounds double, double* %54, i64 3\l  %67 = load double, double* %66, align 8, !tbaa !5\l  %68 = call double @llvm.fmuladd.f64(double %57, double %67, double %50)\l  %69 = getelementptr inbounds double, double* %54, i64 4\l  %70 = load double, double* %69, align 8, !tbaa !5\l  %71 = call double @llvm.fmuladd.f64(double %57, double %70, double %49)\l  %72 = getelementptr inbounds double, double* %54, i64 5\l  %73 = load double, double* %72, align 8, !tbaa !5\l  %74 = call double @llvm.fmuladd.f64(double %57, double %73, double %48)\l  %75 = getelementptr inbounds double, double* %54, i64 6\l  %76 = load double, double* %75, align 8, !tbaa !5\l  %77 = call double @llvm.fmuladd.f64(double %57, double %76, double %47)\l  %78 = getelementptr inbounds double, double* %54, i64 7\l  %79 = load double, double* %78, align 8, !tbaa !5\l  %80 = call double @llvm.fmuladd.f64(double %57, double %79, double %46)\l  %81 = ptrtoint double* %54 to i64\l  %82 = add i64 %81, %9\l  %83 = inttoptr i64 %82 to double*\l  %84 = add nuw i32 %45, 1\l  %85 = icmp eq i32 %84, %3\l  br i1 %85, label %86, label %44, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0xa7ca70:s0 -> Node0xa7cac0;
	Node0xa7ca70:s1 -> Node0xa7ca70;
	Node0xa7cac0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%86:\l86:                                               \l  %87 = ptrtoint double* %56 to i64\l  %88 = sub i64 %87, %13\l  %89 = inttoptr i64 %88 to double*\l  store double %59, double* %26, align 8, !tbaa !5\l  store double %62, double* %30, align 8, !tbaa !5\l  store double %65, double* %32, align 8, !tbaa !5\l  store double %68, double* %34, align 8, !tbaa !5\l  store double %71, double* %36, align 8, !tbaa !5\l  store double %74, double* %38, align 8, !tbaa !5\l  store double %77, double* %40, align 8, !tbaa !5\l  store double %80, double* %42, align 8, !tbaa !5\l  %90 = getelementptr inbounds double, double* %26, i64 8\l  %91 = add nuw nsw i64 %25, 8\l  %92 = icmp ult i64 %91, %19\l  br i1 %92, label %24, label %93, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0xa7cac0:s0 -> Node0xa7ca20;
	Node0xa7cac0:s1 -> Node0xa7cb10;
	Node0xa7cb10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%93:\l93:                                               \l  %94 = add i64 %88, %11\l  %95 = inttoptr i64 %94 to double*\l  %96 = ptrtoint double* %90 to i64\l  %97 = add i64 %96, %16\l  %98 = inttoptr i64 %97 to double*\l  %99 = add nuw i32 %23, 1\l  %100 = icmp eq i32 %99, %3\l  br i1 %100, label %101, label %20, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0xa7cb10:s0 -> Node0xa7cb60;
	Node0xa7cb10:s1 -> Node0xa7c9d0;
	Node0xa7cb60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7ea1fa70",label="{%101:\l101:                                              \l  ret void\l}"];
}
