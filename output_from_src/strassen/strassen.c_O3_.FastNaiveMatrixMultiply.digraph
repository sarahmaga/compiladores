digraph "CFG for 'FastNaiveMatrixMultiply' function" {
	label="CFG for 'FastNaiveMatrixMultiply' function";

	Node0x1752610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%7:\l  %8 = shl i32 %6, 3\l  %9 = zext i32 %8 to i64\l  %10 = shl i32 %5, 3\l  %11 = zext i32 %10 to i64\l  %12 = shl i32 %3, 3\l  %13 = zext i32 %12 to i64\l  %14 = sub i32 %4, %3\l  %15 = shl i32 %14, 3\l  %16 = zext i32 %15 to i64\l  switch i32 %3, label %17 [\l    i32 0, label %131\l    i32 1, label %105\l  ]\l|{<s0>def|<s1>0|<s2>1}}"];
	Node0x1752610:s0 -> Node0x1752660;
	Node0x1752610:s1 -> Node0x1756e50;
	Node0x1752610:s2 -> Node0x1756e00;
	Node0x1752660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#6c8ff170",label="{%17:\l17:                                               \l  %18 = zext i32 %3 to i64\l  br label %19\l}"];
	Node0x1752660 -> Node0x17526b0;
	Node0x17526b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%19:\l19:                                               \l  %20 = phi double* [ %102, %97 ], [ %0, %17 ]\l  %21 = phi double* [ %99, %97 ], [ %1, %17 ]\l  %22 = phi i32 [ %103, %97 ], [ 0, %17 ]\l  br label %23\l}"];
	Node0x17526b0 -> Node0x1756cc0;
	Node0x1756cc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%23:\l23:                                               \l  %24 = phi i64 [ %95, %79 ], [ 0, %19 ]\l  %25 = phi double* [ %94, %79 ], [ %20, %19 ]\l  %26 = phi double* [ %86, %79 ], [ %21, %19 ]\l  %27 = getelementptr inbounds double, double* %2, i64 %24\l  %28 = load double, double* %26, align 8, !tbaa !5\l  %29 = bitcast double* %27 to \<2 x double\>*\l  %30 = load \<2 x double\>, \<2 x double\>* %29, align 8, !tbaa !5\l  %31 = insertelement \<2 x double\> poison, double %28, i64 0\l  %32 = shufflevector \<2 x double\> %31, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %33 = fmul \<2 x double\> %32, %30\l  %34 = getelementptr inbounds double, double* %27, i64 2\l  %35 = bitcast double* %34 to \<2 x double\>*\l  %36 = load \<2 x double\>, \<2 x double\>* %35, align 8, !tbaa !5\l  %37 = fmul \<2 x double\> %32, %36\l  %38 = getelementptr inbounds double, double* %27, i64 4\l  %39 = bitcast double* %38 to \<2 x double\>*\l  %40 = load \<2 x double\>, \<2 x double\>* %39, align 8, !tbaa !5\l  %41 = fmul \<2 x double\> %32, %40\l  %42 = getelementptr inbounds double, double* %27, i64 6\l  %43 = bitcast double* %42 to \<2 x double\>*\l  %44 = load \<2 x double\>, \<2 x double\>* %43, align 8, !tbaa !5\l  %45 = fmul \<2 x double\> %32, %44\l  %46 = getelementptr inbounds double, double* %26, i64 1\l  br label %47\l}"];
	Node0x1756cc0 -> Node0x1756d10;
	Node0x1756d10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%47:\l47:                                               \l  %48 = phi double* [ %46, %23 ], [ %77, %47 ]\l  %49 = phi i32 [ 1, %23 ], [ %76, %47 ]\l  %50 = phi double* [ %27, %23 ], [ %58, %47 ]\l  %51 = phi \<2 x double\> [ %33, %23 ], [ %63, %47 ]\l  %52 = phi \<2 x double\> [ %37, %23 ], [ %67, %47 ]\l  %53 = phi \<2 x double\> [ %41, %23 ], [ %71, %47 ]\l  %54 = phi \<2 x double\> [ %45, %23 ], [ %75, %47 ]\l  %55 = load double, double* %48, align 8, !tbaa !5\l  %56 = ptrtoint double* %50 to i64\l  %57 = add i64 %56, %9\l  %58 = inttoptr i64 %57 to double*\l  %59 = inttoptr i64 %57 to \<2 x double\>*\l  %60 = load \<2 x double\>, \<2 x double\>* %59, align 8, !tbaa !5\l  %61 = insertelement \<2 x double\> poison, double %55, i64 0\l  %62 = shufflevector \<2 x double\> %61, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %63 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %62, \<2 x double\>\l... %60, \<2 x double\> %51)\l  %64 = getelementptr inbounds double, double* %58, i64 2\l  %65 = bitcast double* %64 to \<2 x double\>*\l  %66 = load \<2 x double\>, \<2 x double\>* %65, align 8, !tbaa !5\l  %67 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %62, \<2 x double\>\l... %66, \<2 x double\> %52)\l  %68 = getelementptr inbounds double, double* %58, i64 4\l  %69 = bitcast double* %68 to \<2 x double\>*\l  %70 = load \<2 x double\>, \<2 x double\>* %69, align 8, !tbaa !5\l  %71 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %62, \<2 x double\>\l... %70, \<2 x double\> %53)\l  %72 = getelementptr inbounds double, double* %58, i64 6\l  %73 = bitcast double* %72 to \<2 x double\>*\l  %74 = load \<2 x double\>, \<2 x double\>* %73, align 8, !tbaa !5\l  %75 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %62, \<2 x double\>\l... %74, \<2 x double\> %54)\l  %76 = add nuw i32 %49, 1\l  %77 = getelementptr inbounds double, double* %48, i64 1\l  %78 = icmp eq i32 %76, %3\l  br i1 %78, label %79, label %47, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x1756d10:s0 -> Node0x1756d60;
	Node0x1756d10:s1 -> Node0x1756d10;
	Node0x1756d60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7a88970",label="{%79:\l79:                                               \l  %80 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %62, \<2 x double\>\l... %74, \<2 x double\> %54)\l  %81 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %62, \<2 x double\>\l... %70, \<2 x double\> %53)\l  %82 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %62, \<2 x double\>\l... %66, \<2 x double\> %52)\l  %83 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %62, \<2 x double\>\l... %60, \<2 x double\> %51)\l  %84 = ptrtoint double* %77 to i64\l  %85 = sub i64 %84, %13\l  %86 = inttoptr i64 %85 to double*\l  %87 = bitcast double* %25 to \<2 x double\>*\l  store \<2 x double\> %83, \<2 x double\>* %87, align 8, !tbaa !5\l  %88 = getelementptr inbounds double, double* %25, i64 2\l  %89 = bitcast double* %88 to \<2 x double\>*\l  store \<2 x double\> %82, \<2 x double\>* %89, align 8, !tbaa !5\l  %90 = getelementptr inbounds double, double* %25, i64 4\l  %91 = bitcast double* %90 to \<2 x double\>*\l  store \<2 x double\> %81, \<2 x double\>* %91, align 8, !tbaa !5\l  %92 = getelementptr inbounds double, double* %25, i64 6\l  %93 = bitcast double* %92 to \<2 x double\>*\l  store \<2 x double\> %80, \<2 x double\>* %93, align 8, !tbaa !5\l  %94 = getelementptr inbounds double, double* %25, i64 8\l  %95 = add nuw nsw i64 %24, 8\l  %96 = icmp ult i64 %95, %18\l  br i1 %96, label %23, label %97, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x1756d60:s0 -> Node0x1756cc0;
	Node0x1756d60:s1 -> Node0x1756db0;
	Node0x1756db0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#cedaeb70",label="{%97:\l97:                                               \l  %98 = add i64 %85, %11\l  %99 = inttoptr i64 %98 to double*\l  %100 = ptrtoint double* %94 to i64\l  %101 = add i64 %100, %16\l  %102 = inttoptr i64 %101 to double*\l  %103 = add nuw i32 %22, 1\l  %104 = icmp eq i32 %103, %3\l  br i1 %104, label %131, label %19, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x1756db0:s0 -> Node0x1756e50;
	Node0x1756db0:s1 -> Node0x17526b0;
	Node0x1756e00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%105:\l105:                                              \l  %106 = load double, double* %1, align 8, !tbaa !5\l  %107 = bitcast double* %2 to \<2 x double\>*\l  %108 = load \<2 x double\>, \<2 x double\>* %107, align 8, !tbaa !5\l  %109 = insertelement \<2 x double\> poison, double %106, i64 0\l  %110 = shufflevector \<2 x double\> %109, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %111 = fmul \<2 x double\> %110, %108\l  %112 = getelementptr inbounds double, double* %2, i64 2\l  %113 = bitcast double* %112 to \<2 x double\>*\l  %114 = load \<2 x double\>, \<2 x double\>* %113, align 8, !tbaa !5\l  %115 = fmul \<2 x double\> %110, %114\l  %116 = getelementptr inbounds double, double* %2, i64 4\l  %117 = bitcast double* %116 to \<2 x double\>*\l  %118 = load \<2 x double\>, \<2 x double\>* %117, align 8, !tbaa !5\l  %119 = fmul \<2 x double\> %110, %118\l  %120 = getelementptr inbounds double, double* %2, i64 6\l  %121 = bitcast double* %120 to \<2 x double\>*\l  %122 = load \<2 x double\>, \<2 x double\>* %121, align 8, !tbaa !5\l  %123 = fmul \<2 x double\> %110, %122\l  %124 = bitcast double* %0 to \<2 x double\>*\l  store \<2 x double\> %111, \<2 x double\>* %124, align 8, !tbaa !5\l  %125 = getelementptr inbounds double, double* %0, i64 2\l  %126 = bitcast double* %125 to \<2 x double\>*\l  store \<2 x double\> %115, \<2 x double\>* %126, align 8, !tbaa !5\l  %127 = getelementptr inbounds double, double* %0, i64 4\l  %128 = bitcast double* %127 to \<2 x double\>*\l  store \<2 x double\> %119, \<2 x double\>* %128, align 8, !tbaa !5\l  %129 = getelementptr inbounds double, double* %0, i64 6\l  %130 = bitcast double* %129 to \<2 x double\>*\l  store \<2 x double\> %123, \<2 x double\>* %130, align 8, !tbaa !5\l  br label %131\l}"];
	Node0x1756e00 -> Node0x1756e50;
	Node0x1756e50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#8fb1fe70",label="{%131:\l131:                                              \l  ret void\l}"];
}
