digraph "CFG for 'FastNaiveMatrixMultiply' function" {
	label="CFG for 'FastNaiveMatrixMultiply' function";

	Node0x1548610 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%7:\l  %8 = shl i32 %6, 3\l  %9 = zext i32 %8 to i64\l  %10 = shl i32 %5, 3\l  %11 = zext i32 %10 to i64\l  %12 = shl i32 %3, 3\l  %13 = zext i32 %12 to i64\l  %14 = sub i32 %4, %3\l  %15 = shl i32 %14, 3\l  %16 = zext i32 %15 to i64\l  %17 = icmp eq i32 %3, 0\l  br i1 %17, label %113, label %18\l|{<s0>T|<s1>F}}"];
	Node0x1548610:s0 -> Node0x154ce50;
	Node0x1548610:s1 -> Node0x1548660;
	Node0x1548660 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#7396f570",label="{%18:\l18:                                               \l  %19 = icmp eq i32 %3, 1\l  %20 = zext i32 %3 to i64\l  br label %21\l}"];
	Node0x1548660 -> Node0x15486b0;
	Node0x15486b0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%21:\l21:                                               \l  %22 = phi double* [ %0, %18 ], [ %110, %105 ]\l  %23 = phi double* [ %1, %18 ], [ %107, %105 ]\l  %24 = phi i32 [ 0, %18 ], [ %111, %105 ]\l  br label %25\l}"];
	Node0x15486b0 -> Node0x154ccc0;
	Node0x154ccc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%25:\l25:                                               \l  %26 = phi i64 [ 0, %21 ], [ %103, %86 ]\l  %27 = phi double* [ %22, %21 ], [ %102, %86 ]\l  %28 = phi double* [ %23, %21 ], [ %94, %86 ]\l  %29 = getelementptr inbounds double, double* %2, i64 %26\l  %30 = load double, double* %28, align 8, !tbaa !5\l  %31 = bitcast double* %29 to \<2 x double\>*\l  %32 = load \<2 x double\>, \<2 x double\>* %31, align 8, !tbaa !5\l  %33 = insertelement \<2 x double\> poison, double %30, i64 0\l  %34 = shufflevector \<2 x double\> %33, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %35 = fmul \<2 x double\> %34, %32\l  %36 = getelementptr inbounds double, double* %29, i64 2\l  %37 = bitcast double* %36 to \<2 x double\>*\l  %38 = load \<2 x double\>, \<2 x double\>* %37, align 8, !tbaa !5\l  %39 = fmul \<2 x double\> %34, %38\l  %40 = getelementptr inbounds double, double* %29, i64 4\l  %41 = bitcast double* %40 to \<2 x double\>*\l  %42 = load \<2 x double\>, \<2 x double\>* %41, align 8, !tbaa !5\l  %43 = fmul \<2 x double\> %34, %42\l  %44 = getelementptr inbounds double, double* %29, i64 6\l  %45 = bitcast double* %44 to \<2 x double\>*\l  %46 = load \<2 x double\>, \<2 x double\>* %45, align 8, !tbaa !5\l  %47 = fmul \<2 x double\> %34, %46\l  %48 = getelementptr inbounds double, double* %28, i64 1\l  br i1 %19, label %86, label %49\l|{<s0>T|<s1>F}}"];
	Node0x154ccc0:s0 -> Node0x154cdb0;
	Node0x154ccc0:s1 -> Node0x154cd10;
	Node0x154cd10 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%49:\l49:                                               \l  %50 = phi double* [ %79, %49 ], [ %48, %25 ]\l  %51 = phi i32 [ %78, %49 ], [ 1, %25 ]\l  %52 = phi double* [ %60, %49 ], [ %29, %25 ]\l  %53 = phi \<2 x double\> [ %65, %49 ], [ %35, %25 ]\l  %54 = phi \<2 x double\> [ %69, %49 ], [ %39, %25 ]\l  %55 = phi \<2 x double\> [ %73, %49 ], [ %43, %25 ]\l  %56 = phi \<2 x double\> [ %77, %49 ], [ %47, %25 ]\l  %57 = load double, double* %50, align 8, !tbaa !5\l  %58 = ptrtoint double* %52 to i64\l  %59 = add i64 %58, %9\l  %60 = inttoptr i64 %59 to double*\l  %61 = inttoptr i64 %59 to \<2 x double\>*\l  %62 = load \<2 x double\>, \<2 x double\>* %61, align 8, !tbaa !5\l  %63 = insertelement \<2 x double\> poison, double %57, i64 0\l  %64 = shufflevector \<2 x double\> %63, \<2 x double\> poison, \<2 x i32\>\l... zeroinitializer\l  %65 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %64, \<2 x double\>\l... %62, \<2 x double\> %53)\l  %66 = getelementptr inbounds double, double* %60, i64 2\l  %67 = bitcast double* %66 to \<2 x double\>*\l  %68 = load \<2 x double\>, \<2 x double\>* %67, align 8, !tbaa !5\l  %69 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %64, \<2 x double\>\l... %68, \<2 x double\> %54)\l  %70 = getelementptr inbounds double, double* %60, i64 4\l  %71 = bitcast double* %70 to \<2 x double\>*\l  %72 = load \<2 x double\>, \<2 x double\>* %71, align 8, !tbaa !5\l  %73 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %64, \<2 x double\>\l... %72, \<2 x double\> %55)\l  %74 = getelementptr inbounds double, double* %60, i64 6\l  %75 = bitcast double* %74 to \<2 x double\>*\l  %76 = load \<2 x double\>, \<2 x double\>* %75, align 8, !tbaa !5\l  %77 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %64, \<2 x double\>\l... %76, \<2 x double\> %56)\l  %78 = add nuw i32 %51, 1\l  %79 = getelementptr inbounds double, double* %50, i64 1\l  %80 = icmp eq i32 %78, %3\l  br i1 %80, label %81, label %49, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x154cd10:s0 -> Node0x154cd60;
	Node0x154cd10:s1 -> Node0x154cd10;
	Node0x154cd60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f7ac8e70",label="{%81:\l81:                                               \l  %82 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %64, \<2 x double\>\l... %76, \<2 x double\> %56)\l  %83 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %64, \<2 x double\>\l... %72, \<2 x double\> %55)\l  %84 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %64, \<2 x double\>\l... %68, \<2 x double\> %54)\l  %85 = call \<2 x double\> @llvm.fmuladd.v2f64(\<2 x double\> %64, \<2 x double\>\l... %62, \<2 x double\> %53)\l  br label %86\l}"];
	Node0x154cd60 -> Node0x154cdb0;
	Node0x154cdb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f3947570",label="{%86:\l86:                                               \l  %87 = phi double* [ %48, %25 ], [ %79, %81 ]\l  %88 = phi \<2 x double\> [ %35, %25 ], [ %85, %81 ]\l  %89 = phi \<2 x double\> [ %39, %25 ], [ %84, %81 ]\l  %90 = phi \<2 x double\> [ %43, %25 ], [ %83, %81 ]\l  %91 = phi \<2 x double\> [ %47, %25 ], [ %82, %81 ]\l  %92 = ptrtoint double* %87 to i64\l  %93 = sub i64 %92, %13\l  %94 = inttoptr i64 %93 to double*\l  %95 = bitcast double* %27 to \<2 x double\>*\l  store \<2 x double\> %88, \<2 x double\>* %95, align 8, !tbaa !5\l  %96 = getelementptr inbounds double, double* %27, i64 2\l  %97 = bitcast double* %96 to \<2 x double\>*\l  store \<2 x double\> %89, \<2 x double\>* %97, align 8, !tbaa !5\l  %98 = getelementptr inbounds double, double* %27, i64 4\l  %99 = bitcast double* %98 to \<2 x double\>*\l  store \<2 x double\> %90, \<2 x double\>* %99, align 8, !tbaa !5\l  %100 = getelementptr inbounds double, double* %27, i64 6\l  %101 = bitcast double* %100 to \<2 x double\>*\l  store \<2 x double\> %91, \<2 x double\>* %101, align 8, !tbaa !5\l  %102 = getelementptr inbounds double, double* %27, i64 8\l  %103 = add nuw nsw i64 %26, 8\l  %104 = icmp ult i64 %103, %20\l  br i1 %104, label %25, label %105, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x154cdb0:s0 -> Node0x154ccc0;
	Node0x154cdb0:s1 -> Node0x154ce00;
	Node0x154ce00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d6dce470",label="{%105:\l105:                                              \l  %106 = add i64 %93, %11\l  %107 = inttoptr i64 %106 to double*\l  %108 = ptrtoint double* %102 to i64\l  %109 = add i64 %108, %16\l  %110 = inttoptr i64 %109 to double*\l  %111 = add nuw i32 %24, 1\l  %112 = icmp eq i32 %111, %3\l  br i1 %112, label %113, label %21, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x154ce00:s0 -> Node0x154ce50;
	Node0x154ce00:s1 -> Node0x15486b0;
	Node0x154ce50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%113:\l113:                                              \l  ret void\l}"];
}
