digraph "CFG for 'OptimizedStrassenMultiply' function" {
	label="CFG for 'OptimizedStrassenMultiply' function";

	Node0x157e170 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%8:\l  %9 = lshr i32 %3, 1\l  %10 = zext i32 %9 to i64\l  %11 = shl i32 %9, 3\l  %12 = mul i32 %11, %9\l  %13 = add i32 %12, 32\l  %14 = sub i32 %5, %9\l  %15 = shl i32 %14, 3\l  %16 = zext i32 %15 to i64\l  %17 = sub i32 %6, %9\l  %18 = shl i32 %17, 3\l  %19 = zext i32 %18 to i64\l  %20 = sub i32 %4, %9\l  %21 = shl i32 %20, 3\l  %22 = zext i32 %21 to i64\l  %23 = icmp ult i32 %3, 17\l  br i1 %23, label %24, label %25\l|{<s0>T|<s1>F}}"];
	Node0x157e170:s0 -> Node0x154bf10;
	Node0x157e170:s1 -> Node0x154bf60;
	Node0x154bf10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%24:\l24:                                               \l  tail call void @MultiplyByDivideAndConquer(double* noundef %0, double*\l... noundef %1, double* noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef\l... %5, i32 noundef %6, i32 noundef 0)\l  br label %267\l}"];
	Node0x154bf10 -> Node0x154c280;
	Node0x154bf60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%25:\l25:                                               \l  %26 = getelementptr inbounds double, double* %1, i64 %10\l  %27 = getelementptr inbounds double, double* %0, i64 %10\l  %28 = mul i32 %9, %5\l  %29 = zext i32 %28 to i64\l  %30 = getelementptr inbounds double, double* %1, i64 %29\l  %31 = mul i32 %9, %6\l  %32 = zext i32 %31 to i64\l  %33 = getelementptr inbounds double, double* %2, i64 %32\l  %34 = mul i32 %9, %4\l  %35 = zext i32 %34 to i64\l  %36 = getelementptr inbounds double, double* %0, i64 %35\l  %37 = getelementptr inbounds double, double* %30, i64 %10\l  %38 = getelementptr inbounds double, double* %33, i64 %10\l  %39 = getelementptr inbounds double, double* %36, i64 %10\l  %40 = mul i32 %13, 11\l  %41 = zext i32 %40 to i64\l  %42 = tail call noalias i8* @malloc(i64 noundef %41) #12\l  %43 = ptrtoint i8* %42 to i64\l  %44 = and i64 %43, 31\l  %45 = icmp eq i64 %44, 0\l  %46 = add i64 %43, 32\l  %47 = and i64 %46, -32\l  %48 = inttoptr i64 %47 to i8*\l  %49 = select i1 %45, i8* %42, i8* %48\l  %50 = bitcast i8* %49 to double*\l  %51 = zext i32 %13 to i64\l  %52 = getelementptr inbounds i8, i8* %49, i64 %51\l  %53 = bitcast i8* %52 to double*\l  %54 = getelementptr inbounds i8, i8* %52, i64 %51\l  %55 = bitcast i8* %54 to double*\l  %56 = getelementptr inbounds i8, i8* %54, i64 %51\l  %57 = bitcast i8* %56 to double*\l  %58 = getelementptr inbounds i8, i8* %56, i64 %51\l  %59 = bitcast i8* %58 to double*\l  %60 = getelementptr inbounds i8, i8* %58, i64 %51\l  %61 = bitcast i8* %60 to double*\l  %62 = getelementptr inbounds i8, i8* %60, i64 %51\l  %63 = bitcast i8* %62 to double*\l  %64 = getelementptr inbounds i8, i8* %62, i64 %51\l  %65 = bitcast i8* %64 to double*\l  %66 = getelementptr inbounds i8, i8* %64, i64 %51\l  %67 = bitcast i8* %66 to double*\l  %68 = getelementptr inbounds i8, i8* %66, i64 %51\l  %69 = bitcast i8* %68 to double*\l  %70 = getelementptr inbounds i8, i8* %68, i64 %51\l  %71 = bitcast i8* %70 to double*\l  %72 = getelementptr inbounds double, double* %2, i64 %10\l  %73 = ptrtoint double* %26 to i64\l  %74 = ptrtoint double* %30 to i64\l  %75 = ptrtoint double* %37 to i64\l  %76 = ptrtoint i8* %49 to i64\l  %77 = ptrtoint double* %1 to i64\l  %78 = ptrtoint i8* %52 to i64\l  %79 = ptrtoint i8* %56 to i64\l  %80 = ptrtoint double* %38 to i64\l  %81 = ptrtoint double* %72 to i64\l  %82 = ptrtoint double* %2 to i64\l  %83 = ptrtoint i8* %58 to i64\l  %84 = ptrtoint i8* %60 to i64\l  %85 = ptrtoint double* %33 to i64\l  %86 = ptrtoint i8* %64 to i64\l  %87 = ptrtoint i8* %54 to i64\l  %88 = ptrtoint i8* %62 to i64\l  %89 = call i32 @llvm.umax.i32(i32 %9, i32 1)\l  br label %90\l}"];
	Node0x154bf60 -> Node0x154bfb0;
	Node0x154bfb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%90:\l90:                                               \l  %91 = phi i32 [ 0, %25 ], [ %160, %157 ]\l  %92 = phi i64 [ 0, %25 ], [ %152, %157 ]\l  %93 = phi i64 [ 0, %25 ], [ %158, %157 ]\l  %94 = phi i64 [ 0, %25 ], [ %159, %157 ]\l  br label %95\l}"];
	Node0x154bfb0 -> Node0x154c000;
	Node0x154c000 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%95:\l95:                                               \l  %96 = phi i32 [ %155, %95 ], [ 0, %90 ]\l  %97 = phi i64 [ %152, %95 ], [ %92, %90 ]\l  %98 = phi i64 [ %153, %95 ], [ %93, %90 ]\l  %99 = phi i64 [ %154, %95 ], [ %94, %90 ]\l  %100 = add i64 %98, %73\l  %101 = inttoptr i64 %100 to double*\l  %102 = load double, double* %101, align 8, !tbaa !5\l  %103 = add i64 %98, %74\l  %104 = inttoptr i64 %103 to double*\l  %105 = load double, double* %104, align 8, !tbaa !5\l  %106 = add i64 %98, %75\l  %107 = inttoptr i64 %106 to double*\l  %108 = load double, double* %107, align 8, !tbaa !5\l  %109 = fadd double %105, %108\l  %110 = add i64 %97, %76\l  %111 = inttoptr i64 %110 to double*\l  store double %109, double* %111, align 8, !tbaa !5\l  %112 = add i64 %98, %77\l  %113 = inttoptr i64 %112 to double*\l  %114 = load double, double* %113, align 8, !tbaa !5\l  %115 = fsub double %109, %114\l  %116 = add i64 %97, %78\l  %117 = inttoptr i64 %116 to double*\l  store double %115, double* %117, align 8, !tbaa !5\l  %118 = fsub double %102, %115\l  %119 = add i64 %97, %79\l  %120 = inttoptr i64 %119 to double*\l  store double %118, double* %120, align 8, !tbaa !5\l  %121 = add i64 %99, %80\l  %122 = inttoptr i64 %121 to double*\l  %123 = load double, double* %122, align 8, !tbaa !5\l  %124 = add i64 %99, %81\l  %125 = inttoptr i64 %124 to double*\l  %126 = load double, double* %125, align 8, !tbaa !5\l  %127 = add i64 %99, %82\l  %128 = inttoptr i64 %127 to double*\l  %129 = load double, double* %128, align 8, !tbaa !5\l  %130 = fsub double %126, %129\l  %131 = add i64 %97, %83\l  %132 = inttoptr i64 %131 to double*\l  store double %130, double* %132, align 8, !tbaa !5\l  %133 = fsub double %123, %130\l  %134 = add i64 %97, %84\l  %135 = inttoptr i64 %134 to double*\l  store double %133, double* %135, align 8, !tbaa !5\l  %136 = add i64 %99, %85\l  %137 = inttoptr i64 %136 to double*\l  %138 = load double, double* %137, align 8, !tbaa !5\l  %139 = fsub double %133, %138\l  %140 = add i64 %97, %86\l  %141 = inttoptr i64 %140 to double*\l  store double %139, double* %141, align 8, !tbaa !5\l  %142 = load double, double* %113, align 8, !tbaa !5\l  %143 = load double, double* %104, align 8, !tbaa !5\l  %144 = fsub double %142, %143\l  %145 = add i64 %97, %87\l  %146 = inttoptr i64 %145 to double*\l  store double %144, double* %146, align 8, !tbaa !5\l  %147 = load double, double* %122, align 8, !tbaa !5\l  %148 = load double, double* %125, align 8, !tbaa !5\l  %149 = fsub double %147, %148\l  %150 = add i64 %97, %88\l  %151 = inttoptr i64 %150 to double*\l  store double %149, double* %151, align 8, !tbaa !5\l  %152 = add i64 %97, 8\l  %153 = add i64 %98, 8\l  %154 = add i64 %99, 8\l  %155 = add nuw nsw i32 %96, 1\l  %156 = icmp eq i32 %155, %89\l  br i1 %156, label %157, label %95, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0x154c000:s0 -> Node0x154c050;
	Node0x154c000:s1 -> Node0x154c000;
	Node0x154c050 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%157:\l157:                                              \l  %158 = add i64 %153, %16\l  %159 = add i64 %154, %19\l  %160 = add nuw nsw i32 %91, 1\l  %161 = icmp eq i32 %160, %89\l  br i1 %161, label %162, label %90, !llvm.loop !11\l|{<s0>T|<s1>F}}"];
	Node0x154c050:s0 -> Node0x154c0a0;
	Node0x154c050:s1 -> Node0x154bfb0;
	Node0x154c0a0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%162:\l162:                                              \l  %163 = add nsw i32 %7, 1\l  tail call void @OptimizedStrassenMultiply(double* noundef %67, double*\l... noundef %1, double* noundef %2, i32 noundef %9, i32 noundef %9, i32 noundef\l... %5, i32 noundef %6, i32 noundef %163)\l  tail call void @OptimizedStrassenMultiply(double* noundef %69, double*\l... noundef %50, double* noundef %59, i32 noundef %9, i32 noundef %9, i32 noundef\l... %9, i32 noundef %9, i32 noundef %163)\l  tail call void @OptimizedStrassenMultiply(double* noundef %71, double*\l... noundef %53, double* noundef %61, i32 noundef %9, i32 noundef %9, i32 noundef\l... %9, i32 noundef %9, i32 noundef %163)\l  tail call void @OptimizedStrassenMultiply(double* noundef %39, double*\l... noundef %55, double* noundef %63, i32 noundef %9, i32 noundef %4, i32 noundef\l... %9, i32 noundef %9, i32 noundef %163)\l  tail call void @OptimizedStrassenMultiply(double* noundef %0, double*\l... noundef %26, double* noundef %33, i32 noundef %9, i32 noundef %4, i32 noundef\l... %5, i32 noundef %6, i32 noundef %163)\l  tail call void @OptimizedStrassenMultiply(double* noundef %27, double*\l... noundef %57, double* noundef %38, i32 noundef %9, i32 noundef %4, i32 noundef\l... %9, i32 noundef %6, i32 noundef %163)\l  tail call void @OptimizedStrassenMultiply(double* noundef %36, double*\l... noundef %37, double* noundef %65, i32 noundef %9, i32 noundef %4, i32 noundef\l... %5, i32 noundef %9, i32 noundef %163)\l  %164 = icmp ult i32 %3, 2\l  br i1 %164, label %266, label %165\l|{<s0>T|<s1>F}}"];
	Node0x154c0a0:s0 -> Node0x154c230;
	Node0x154c0a0:s1 -> Node0x154c0f0;
	Node0x154c0f0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%165:\l165:                                              \l  %166 = call i32 @llvm.umax.i32(i32 %9, i32 1)\l  br label %167\l}"];
	Node0x154c0f0 -> Node0x154c140;
	Node0x154c140 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%167:\l167:                                              \l  %168 = phi double* [ %0, %165 ], [ %254, %251 ]\l  %169 = phi i32 [ 0, %165 ], [ %264, %251 ]\l  %170 = phi double* [ %27, %165 ], [ %257, %251 ]\l  %171 = phi double* [ %36, %165 ], [ %260, %251 ]\l  %172 = phi double* [ %39, %165 ], [ %263, %251 ]\l  %173 = phi double* [ %67, %165 ], [ %243, %251 ]\l  %174 = phi double* [ %69, %165 ], [ %242, %251 ]\l  %175 = phi double* [ %71, %165 ], [ %244, %251 ]\l  br label %176\l}"];
	Node0x154c140 -> Node0x154c190;
	Node0x154c190 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%176:\l176:                                              \l  %177 = phi double* [ %245, %176 ], [ %168, %167 ]\l  %178 = phi i32 [ %249, %176 ], [ 0, %167 ]\l  %179 = phi double* [ %246, %176 ], [ %170, %167 ]\l  %180 = phi double* [ %247, %176 ], [ %171, %167 ]\l  %181 = phi double* [ %248, %176 ], [ %172, %167 ]\l  %182 = phi double* [ %243, %176 ], [ %173, %167 ]\l  %183 = phi double* [ %242, %176 ], [ %174, %167 ]\l  %184 = phi double* [ %244, %176 ], [ %175, %167 ]\l  %185 = bitcast double* %183 to \<2 x double\>*\l  %186 = load \<2 x double\>, \<2 x double\>* %185, align 8, !tbaa !5\l  %187 = getelementptr inbounds double, double* %183, i64 2\l  %188 = bitcast double* %187 to \<2 x double\>*\l  %189 = load \<2 x double\>, \<2 x double\>* %188, align 8, !tbaa !5\l  %190 = bitcast double* %182 to \<2 x double\>*\l  %191 = load \<2 x double\>, \<2 x double\>* %190, align 8, !tbaa !5\l  %192 = getelementptr inbounds double, double* %182, i64 2\l  %193 = bitcast double* %192 to \<2 x double\>*\l  %194 = load \<2 x double\>, \<2 x double\>* %193, align 8, !tbaa !5\l  %195 = bitcast double* %184 to \<2 x double\>*\l  %196 = load \<2 x double\>, \<2 x double\>* %195, align 8, !tbaa !5\l  %197 = fadd \<2 x double\> %191, %196\l  %198 = getelementptr inbounds double, double* %184, i64 2\l  %199 = bitcast double* %198 to \<2 x double\>*\l  %200 = load \<2 x double\>, \<2 x double\>* %199, align 8, !tbaa !5\l  %201 = fadd \<2 x double\> %194, %200\l  %202 = bitcast double* %181 to \<2 x double\>*\l  %203 = load \<2 x double\>, \<2 x double\>* %202, align 8, !tbaa !5\l  %204 = fadd \<2 x double\> %197, %203\l  %205 = getelementptr inbounds double, double* %181, i64 2\l  %206 = bitcast double* %205 to \<2 x double\>*\l  %207 = load \<2 x double\>, \<2 x double\>* %206, align 8, !tbaa !5\l  %208 = fadd \<2 x double\> %201, %207\l  %209 = bitcast double* %177 to \<2 x double\>*\l  %210 = load \<2 x double\>, \<2 x double\>* %209, align 8, !tbaa !5\l  %211 = fadd \<2 x double\> %191, %210\l  %212 = bitcast double* %177 to \<2 x double\>*\l  store \<2 x double\> %211, \<2 x double\>* %212, align 8, !tbaa !5\l  %213 = getelementptr inbounds double, double* %177, i64 2\l  %214 = bitcast double* %213 to \<2 x double\>*\l  %215 = load \<2 x double\>, \<2 x double\>* %214, align 8, !tbaa !5\l  %216 = fadd \<2 x double\> %194, %215\l  %217 = bitcast double* %213 to \<2 x double\>*\l  store \<2 x double\> %216, \<2 x double\>* %217, align 8, !tbaa !5\l  %218 = fadd \<2 x double\> %186, %197\l  %219 = bitcast double* %179 to \<2 x double\>*\l  %220 = load \<2 x double\>, \<2 x double\>* %219, align 8, !tbaa !5\l  %221 = fadd \<2 x double\> %218, %220\l  %222 = bitcast double* %179 to \<2 x double\>*\l  store \<2 x double\> %221, \<2 x double\>* %222, align 8, !tbaa !5\l  %223 = getelementptr inbounds double, double* %179, i64 2\l  %224 = fadd \<2 x double\> %189, %201\l  %225 = bitcast double* %223 to \<2 x double\>*\l  %226 = load \<2 x double\>, \<2 x double\>* %225, align 8, !tbaa !5\l  %227 = fadd \<2 x double\> %224, %226\l  %228 = bitcast double* %223 to \<2 x double\>*\l  store \<2 x double\> %227, \<2 x double\>* %228, align 8, !tbaa !5\l  %229 = fadd \<2 x double\> %186, %204\l  %230 = bitcast double* %181 to \<2 x double\>*\l  store \<2 x double\> %229, \<2 x double\>* %230, align 8, !tbaa !5\l  %231 = fadd \<2 x double\> %189, %208\l  %232 = bitcast double* %205 to \<2 x double\>*\l  store \<2 x double\> %231, \<2 x double\>* %232, align 8, !tbaa !5\l  %233 = bitcast double* %180 to \<2 x double\>*\l  %234 = load \<2 x double\>, \<2 x double\>* %233, align 8, !tbaa !5\l  %235 = fsub \<2 x double\> %204, %234\l  %236 = bitcast double* %180 to \<2 x double\>*\l  store \<2 x double\> %235, \<2 x double\>* %236, align 8, !tbaa !5\l  %237 = getelementptr inbounds double, double* %180, i64 2\l  %238 = bitcast double* %237 to \<2 x double\>*\l  %239 = load \<2 x double\>, \<2 x double\>* %238, align 8, !tbaa !5\l  %240 = fsub \<2 x double\> %208, %239\l  %241 = bitcast double* %237 to \<2 x double\>*\l  store \<2 x double\> %240, \<2 x double\>* %241, align 8, !tbaa !5\l  %242 = getelementptr inbounds double, double* %183, i64 4\l  %243 = getelementptr inbounds double, double* %182, i64 4\l  %244 = getelementptr inbounds double, double* %184, i64 4\l  %245 = getelementptr inbounds double, double* %177, i64 4\l  %246 = getelementptr inbounds double, double* %179, i64 4\l  %247 = getelementptr inbounds double, double* %180, i64 4\l  %248 = getelementptr inbounds double, double* %181, i64 4\l  %249 = add nuw i32 %178, 4\l  %250 = icmp ult i32 %249, %9\l  br i1 %250, label %176, label %251, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0x154c190:s0 -> Node0x154c190;
	Node0x154c190:s1 -> Node0x154c1e0;
	Node0x154c1e0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%251:\l251:                                              \l  %252 = ptrtoint double* %245 to i64\l  %253 = add i64 %252, %22\l  %254 = inttoptr i64 %253 to double*\l  %255 = ptrtoint double* %246 to i64\l  %256 = add i64 %255, %22\l  %257 = inttoptr i64 %256 to double*\l  %258 = ptrtoint double* %247 to i64\l  %259 = add i64 %258, %22\l  %260 = inttoptr i64 %259 to double*\l  %261 = ptrtoint double* %248 to i64\l  %262 = add i64 %261, %22\l  %263 = inttoptr i64 %262 to double*\l  %264 = add nuw nsw i32 %169, 1\l  %265 = icmp eq i32 %264, %166\l  br i1 %265, label %266, label %167, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0x154c1e0:s0 -> Node0x154c230;
	Node0x154c1e0:s1 -> Node0x154c140;
	Node0x154c230 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%266:\l266:                                              \l  tail call void @free(i8* noundef %42) #12\l  br label %267\l}"];
	Node0x154c230 -> Node0x154c280;
	Node0x154c280 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%267:\l267:                                              \l  ret void\l}"];
}
