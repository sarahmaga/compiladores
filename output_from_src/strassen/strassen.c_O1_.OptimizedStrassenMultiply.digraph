digraph "CFG for 'OptimizedStrassenMultiply' function" {
	label="CFG for 'OptimizedStrassenMultiply' function";

	Node0xffbe60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%8:\l  %9 = lshr i32 %3, 1\l  %10 = zext i32 %9 to i64\l  %11 = shl i32 %9, 3\l  %12 = mul i32 %11, %9\l  %13 = add i32 %12, 32\l  %14 = sub i32 %5, %9\l  %15 = shl i32 %14, 3\l  %16 = zext i32 %15 to i64\l  %17 = sub i32 %6, %9\l  %18 = shl i32 %17, 3\l  %19 = zext i32 %18 to i64\l  %20 = sub i32 %4, %9\l  %21 = shl i32 %20, 3\l  %22 = zext i32 %21 to i64\l  %23 = icmp ult i32 %3, 17\l  br i1 %23, label %24, label %25\l|{<s0>T|<s1>F}}"];
	Node0xffbe60:s0 -> Node0xfd3c30;
	Node0xffbe60:s1 -> Node0xfd3c80;
	Node0xfd3c30 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%24:\l24:                                               \l  call void @MultiplyByDivideAndConquer(double* noundef %0, double* noundef\l... %1, double* noundef %2, i32 noundef %3, i32 noundef %4, i32 noundef %5, i32\l... noundef %6, i32 noundef 0)\l  br label %288\l}"];
	Node0xfd3c30 -> Node0xfd3fa0;
	Node0xfd3c80 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%25:\l25:                                               \l  %26 = getelementptr inbounds double, double* %1, i64 %10\l  %27 = getelementptr inbounds double, double* %0, i64 %10\l  %28 = mul i32 %9, %5\l  %29 = zext i32 %28 to i64\l  %30 = getelementptr inbounds double, double* %1, i64 %29\l  %31 = mul i32 %9, %6\l  %32 = zext i32 %31 to i64\l  %33 = getelementptr inbounds double, double* %2, i64 %32\l  %34 = mul i32 %9, %4\l  %35 = zext i32 %34 to i64\l  %36 = getelementptr inbounds double, double* %0, i64 %35\l  %37 = getelementptr inbounds double, double* %30, i64 %10\l  %38 = getelementptr inbounds double, double* %33, i64 %10\l  %39 = getelementptr inbounds double, double* %36, i64 %10\l  %40 = mul i32 %13, 11\l  %41 = zext i32 %40 to i64\l  %42 = call noalias i8* @malloc(i64 noundef %41) #12\l  %43 = ptrtoint i8* %42 to i64\l  %44 = and i64 %43, 31\l  %45 = icmp eq i64 %44, 0\l  %46 = add i64 %43, 32\l  %47 = and i64 %46, -32\l  %48 = inttoptr i64 %47 to i8*\l  %49 = select i1 %45, i8* %42, i8* %48\l  %50 = bitcast i8* %49 to double*\l  %51 = zext i32 %13 to i64\l  %52 = getelementptr inbounds i8, i8* %49, i64 %51\l  %53 = bitcast i8* %52 to double*\l  %54 = getelementptr inbounds i8, i8* %52, i64 %51\l  %55 = bitcast i8* %54 to double*\l  %56 = getelementptr inbounds i8, i8* %54, i64 %51\l  %57 = bitcast i8* %56 to double*\l  %58 = getelementptr inbounds i8, i8* %56, i64 %51\l  %59 = bitcast i8* %58 to double*\l  %60 = getelementptr inbounds i8, i8* %58, i64 %51\l  %61 = bitcast i8* %60 to double*\l  %62 = getelementptr inbounds i8, i8* %60, i64 %51\l  %63 = bitcast i8* %62 to double*\l  %64 = getelementptr inbounds i8, i8* %62, i64 %51\l  %65 = bitcast i8* %64 to double*\l  %66 = getelementptr inbounds i8, i8* %64, i64 %51\l  %67 = bitcast i8* %66 to double*\l  %68 = getelementptr inbounds i8, i8* %66, i64 %51\l  %69 = bitcast i8* %68 to double*\l  %70 = getelementptr inbounds i8, i8* %68, i64 %51\l  %71 = bitcast i8* %70 to double*\l  %72 = getelementptr inbounds double, double* %2, i64 %10\l  %73 = ptrtoint double* %26 to i64\l  %74 = ptrtoint double* %30 to i64\l  %75 = ptrtoint double* %37 to i64\l  %76 = ptrtoint i8* %49 to i64\l  %77 = ptrtoint double* %1 to i64\l  %78 = ptrtoint i8* %52 to i64\l  %79 = ptrtoint i8* %56 to i64\l  %80 = ptrtoint double* %38 to i64\l  %81 = ptrtoint double* %72 to i64\l  %82 = ptrtoint double* %2 to i64\l  %83 = ptrtoint i8* %58 to i64\l  %84 = ptrtoint i8* %60 to i64\l  %85 = ptrtoint double* %33 to i64\l  %86 = ptrtoint i8* %64 to i64\l  %87 = ptrtoint i8* %54 to i64\l  %88 = ptrtoint i8* %62 to i64\l  %89 = call i32 @llvm.umax.i32(i32 %9, i32 1)\l  %90 = call i32 @llvm.umax.i32(i32 %9, i32 1)\l  br label %91\l}"];
	Node0xfd3c80 -> Node0xfd3cd0;
	Node0xfd3cd0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%91:\l91:                                               \l  %92 = phi i32 [ 0, %25 ], [ %161, %158 ]\l  %93 = phi i64 [ 0, %25 ], [ %153, %158 ]\l  %94 = phi i64 [ 0, %25 ], [ %159, %158 ]\l  %95 = phi i64 [ 0, %25 ], [ %160, %158 ]\l  br label %96\l}"];
	Node0xfd3cd0 -> Node0xfd3d20;
	Node0xfd3d20 [shape=record,color="#b70d28ff", style=filled, fillcolor="#b70d2870",label="{%96:\l96:                                               \l  %97 = phi i32 [ %156, %96 ], [ 0, %91 ]\l  %98 = phi i64 [ %153, %96 ], [ %93, %91 ]\l  %99 = phi i64 [ %154, %96 ], [ %94, %91 ]\l  %100 = phi i64 [ %155, %96 ], [ %95, %91 ]\l  %101 = add i64 %99, %73\l  %102 = inttoptr i64 %101 to double*\l  %103 = load double, double* %102, align 8, !tbaa !5\l  %104 = add i64 %99, %74\l  %105 = inttoptr i64 %104 to double*\l  %106 = load double, double* %105, align 8, !tbaa !5\l  %107 = add i64 %99, %75\l  %108 = inttoptr i64 %107 to double*\l  %109 = load double, double* %108, align 8, !tbaa !5\l  %110 = fadd double %106, %109\l  %111 = add i64 %98, %76\l  %112 = inttoptr i64 %111 to double*\l  store double %110, double* %112, align 8, !tbaa !5\l  %113 = add i64 %99, %77\l  %114 = inttoptr i64 %113 to double*\l  %115 = load double, double* %114, align 8, !tbaa !5\l  %116 = fsub double %110, %115\l  %117 = add i64 %98, %78\l  %118 = inttoptr i64 %117 to double*\l  store double %116, double* %118, align 8, !tbaa !5\l  %119 = fsub double %103, %116\l  %120 = add i64 %98, %79\l  %121 = inttoptr i64 %120 to double*\l  store double %119, double* %121, align 8, !tbaa !5\l  %122 = add i64 %100, %80\l  %123 = inttoptr i64 %122 to double*\l  %124 = load double, double* %123, align 8, !tbaa !5\l  %125 = add i64 %100, %81\l  %126 = inttoptr i64 %125 to double*\l  %127 = load double, double* %126, align 8, !tbaa !5\l  %128 = add i64 %100, %82\l  %129 = inttoptr i64 %128 to double*\l  %130 = load double, double* %129, align 8, !tbaa !5\l  %131 = fsub double %127, %130\l  %132 = add i64 %98, %83\l  %133 = inttoptr i64 %132 to double*\l  store double %131, double* %133, align 8, !tbaa !5\l  %134 = fsub double %124, %131\l  %135 = add i64 %98, %84\l  %136 = inttoptr i64 %135 to double*\l  store double %134, double* %136, align 8, !tbaa !5\l  %137 = add i64 %100, %85\l  %138 = inttoptr i64 %137 to double*\l  %139 = load double, double* %138, align 8, !tbaa !5\l  %140 = fsub double %134, %139\l  %141 = add i64 %98, %86\l  %142 = inttoptr i64 %141 to double*\l  store double %140, double* %142, align 8, !tbaa !5\l  %143 = load double, double* %114, align 8, !tbaa !5\l  %144 = load double, double* %105, align 8, !tbaa !5\l  %145 = fsub double %143, %144\l  %146 = add i64 %98, %87\l  %147 = inttoptr i64 %146 to double*\l  store double %145, double* %147, align 8, !tbaa !5\l  %148 = load double, double* %123, align 8, !tbaa !5\l  %149 = load double, double* %126, align 8, !tbaa !5\l  %150 = fsub double %148, %149\l  %151 = add i64 %98, %88\l  %152 = inttoptr i64 %151 to double*\l  store double %150, double* %152, align 8, !tbaa !5\l  %153 = add i64 %98, 8\l  %154 = add i64 %99, 8\l  %155 = add i64 %100, 8\l  %156 = add nuw nsw i32 %97, 1\l  %157 = icmp eq i32 %156, %89\l  br i1 %157, label %158, label %96, !llvm.loop !9\l|{<s0>T|<s1>F}}"];
	Node0xfd3d20:s0 -> Node0xfd3d70;
	Node0xfd3d20:s1 -> Node0xfd3d20;
	Node0xfd3d70 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#f6bfa670",label="{%158:\l158:                                              \l  %159 = add i64 %154, %16\l  %160 = add i64 %155, %19\l  %161 = add nuw nsw i32 %92, 1\l  %162 = icmp eq i32 %161, %90\l  br i1 %162, label %163, label %91, !llvm.loop !12\l|{<s0>T|<s1>F}}"];
	Node0xfd3d70:s0 -> Node0xfd3dc0;
	Node0xfd3d70:s1 -> Node0xfd3cd0;
	Node0xfd3dc0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%163:\l163:                                              \l  %164 = add nsw i32 %7, 1\l  call void @OptimizedStrassenMultiply(double* noundef %67, double* noundef\l... %1, double* noundef %2, i32 noundef %9, i32 noundef %9, i32 noundef %5, i32\l... noundef %6, i32 noundef %164)\l  call void @OptimizedStrassenMultiply(double* noundef %69, double* noundef\l... %50, double* noundef %59, i32 noundef %9, i32 noundef %9, i32 noundef %9, i32\l... noundef %9, i32 noundef %164)\l  call void @OptimizedStrassenMultiply(double* noundef %71, double* noundef\l... %53, double* noundef %61, i32 noundef %9, i32 noundef %9, i32 noundef %9, i32\l... noundef %9, i32 noundef %164)\l  call void @OptimizedStrassenMultiply(double* noundef %39, double* noundef\l... %55, double* noundef %63, i32 noundef %9, i32 noundef %4, i32 noundef %9, i32\l... noundef %9, i32 noundef %164)\l  call void @OptimizedStrassenMultiply(double* noundef %0, double* noundef\l... %26, double* noundef %33, i32 noundef %9, i32 noundef %4, i32 noundef %5, i32\l... noundef %6, i32 noundef %164)\l  call void @OptimizedStrassenMultiply(double* noundef %27, double* noundef\l... %57, double* noundef %38, i32 noundef %9, i32 noundef %4, i32 noundef %9, i32\l... noundef %6, i32 noundef %164)\l  call void @OptimizedStrassenMultiply(double* noundef %36, double* noundef\l... %37, double* noundef %65, i32 noundef %9, i32 noundef %4, i32 noundef %5, i32\l... noundef %9, i32 noundef %164)\l  %165 = icmp ult i32 %3, 2\l  br i1 %165, label %287, label %166\l|{<s0>T|<s1>F}}"];
	Node0xfd3dc0:s0 -> Node0xfd3f50;
	Node0xfd3dc0:s1 -> Node0xfd3e10;
	Node0xfd3e10 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#81a4fb70",label="{%166:\l166:                                              \l  %167 = call i32 @llvm.umax.i32(i32 %9, i32 1)\l  br label %168\l}"];
	Node0xfd3e10 -> Node0xfd3e60;
	Node0xfd3e60 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%168:\l168:                                              \l  %169 = phi double* [ %0, %166 ], [ %275, %272 ]\l  %170 = phi i32 [ 0, %166 ], [ %285, %272 ]\l  %171 = phi double* [ %27, %166 ], [ %278, %272 ]\l  %172 = phi double* [ %36, %166 ], [ %281, %272 ]\l  %173 = phi double* [ %39, %166 ], [ %284, %272 ]\l  %174 = phi double* [ %67, %166 ], [ %264, %272 ]\l  %175 = phi double* [ %69, %166 ], [ %263, %272 ]\l  %176 = phi double* [ %71, %166 ], [ %265, %272 ]\l  br label %177\l}"];
	Node0xfd3e60 -> Node0xfd3eb0;
	Node0xfd3eb0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#d0473d70",label="{%177:\l177:                                              \l  %178 = phi double* [ %266, %177 ], [ %169, %168 ]\l  %179 = phi i32 [ %270, %177 ], [ 0, %168 ]\l  %180 = phi double* [ %267, %177 ], [ %171, %168 ]\l  %181 = phi double* [ %268, %177 ], [ %172, %168 ]\l  %182 = phi double* [ %269, %177 ], [ %173, %168 ]\l  %183 = phi double* [ %264, %177 ], [ %174, %168 ]\l  %184 = phi double* [ %263, %177 ], [ %175, %168 ]\l  %185 = phi double* [ %265, %177 ], [ %176, %168 ]\l  %186 = load double, double* %184, align 8, !tbaa !5\l  %187 = getelementptr inbounds double, double* %184, i64 1\l  %188 = load double, double* %187, align 8, !tbaa !5\l  %189 = getelementptr inbounds double, double* %184, i64 2\l  %190 = load double, double* %189, align 8, !tbaa !5\l  %191 = getelementptr inbounds double, double* %184, i64 3\l  %192 = load double, double* %191, align 8, !tbaa !5\l  %193 = load double, double* %183, align 8, !tbaa !5\l  %194 = getelementptr inbounds double, double* %183, i64 1\l  %195 = load double, double* %194, align 8, !tbaa !5\l  %196 = getelementptr inbounds double, double* %183, i64 2\l  %197 = load double, double* %196, align 8, !tbaa !5\l  %198 = getelementptr inbounds double, double* %183, i64 3\l  %199 = load double, double* %198, align 8, !tbaa !5\l  %200 = load double, double* %185, align 8, !tbaa !5\l  %201 = fadd double %193, %200\l  %202 = getelementptr inbounds double, double* %185, i64 1\l  %203 = load double, double* %202, align 8, !tbaa !5\l  %204 = fadd double %195, %203\l  %205 = getelementptr inbounds double, double* %185, i64 2\l  %206 = load double, double* %205, align 8, !tbaa !5\l  %207 = fadd double %197, %206\l  %208 = getelementptr inbounds double, double* %185, i64 3\l  %209 = load double, double* %208, align 8, !tbaa !5\l  %210 = fadd double %199, %209\l  %211 = load double, double* %182, align 8, !tbaa !5\l  %212 = fadd double %201, %211\l  %213 = getelementptr inbounds double, double* %182, i64 1\l  %214 = load double, double* %213, align 8, !tbaa !5\l  %215 = fadd double %204, %214\l  %216 = getelementptr inbounds double, double* %182, i64 2\l  %217 = load double, double* %216, align 8, !tbaa !5\l  %218 = fadd double %207, %217\l  %219 = getelementptr inbounds double, double* %182, i64 3\l  %220 = load double, double* %219, align 8, !tbaa !5\l  %221 = fadd double %210, %220\l  %222 = load double, double* %178, align 8, !tbaa !5\l  %223 = fadd double %193, %222\l  store double %223, double* %178, align 8, !tbaa !5\l  %224 = getelementptr inbounds double, double* %178, i64 1\l  %225 = load double, double* %224, align 8, !tbaa !5\l  %226 = fadd double %195, %225\l  store double %226, double* %224, align 8, !tbaa !5\l  %227 = getelementptr inbounds double, double* %178, i64 2\l  %228 = load double, double* %227, align 8, !tbaa !5\l  %229 = fadd double %197, %228\l  store double %229, double* %227, align 8, !tbaa !5\l  %230 = getelementptr inbounds double, double* %178, i64 3\l  %231 = load double, double* %230, align 8, !tbaa !5\l  %232 = fadd double %199, %231\l  store double %232, double* %230, align 8, !tbaa !5\l  %233 = fadd double %186, %201\l  %234 = load double, double* %180, align 8, !tbaa !5\l  %235 = fadd double %233, %234\l  store double %235, double* %180, align 8, !tbaa !5\l  %236 = fadd double %188, %204\l  %237 = getelementptr inbounds double, double* %180, i64 1\l  %238 = load double, double* %237, align 8, !tbaa !5\l  %239 = fadd double %236, %238\l  store double %239, double* %237, align 8, !tbaa !5\l  %240 = fadd double %190, %207\l  %241 = getelementptr inbounds double, double* %180, i64 2\l  %242 = load double, double* %241, align 8, !tbaa !5\l  %243 = fadd double %240, %242\l  store double %243, double* %241, align 8, !tbaa !5\l  %244 = fadd double %192, %210\l  %245 = getelementptr inbounds double, double* %180, i64 3\l  %246 = load double, double* %245, align 8, !tbaa !5\l  %247 = fadd double %244, %246\l  store double %247, double* %245, align 8, !tbaa !5\l  %248 = fadd double %186, %212\l  store double %248, double* %182, align 8, !tbaa !5\l  %249 = fadd double %188, %215\l  store double %249, double* %213, align 8, !tbaa !5\l  %250 = fadd double %190, %218\l  store double %250, double* %216, align 8, !tbaa !5\l  %251 = fadd double %192, %221\l  store double %251, double* %219, align 8, !tbaa !5\l  %252 = load double, double* %181, align 8, !tbaa !5\l  %253 = fsub double %212, %252\l  store double %253, double* %181, align 8, !tbaa !5\l  %254 = getelementptr inbounds double, double* %181, i64 1\l  %255 = load double, double* %254, align 8, !tbaa !5\l  %256 = fsub double %215, %255\l  store double %256, double* %254, align 8, !tbaa !5\l  %257 = getelementptr inbounds double, double* %181, i64 2\l  %258 = load double, double* %257, align 8, !tbaa !5\l  %259 = fsub double %218, %258\l  store double %259, double* %257, align 8, !tbaa !5\l  %260 = getelementptr inbounds double, double* %181, i64 3\l  %261 = load double, double* %260, align 8, !tbaa !5\l  %262 = fsub double %221, %261\l  store double %262, double* %260, align 8, !tbaa !5\l  %263 = getelementptr inbounds double, double* %184, i64 4\l  %264 = getelementptr inbounds double, double* %183, i64 4\l  %265 = getelementptr inbounds double, double* %185, i64 4\l  %266 = getelementptr inbounds double, double* %178, i64 4\l  %267 = getelementptr inbounds double, double* %180, i64 4\l  %268 = getelementptr inbounds double, double* %181, i64 4\l  %269 = getelementptr inbounds double, double* %182, i64 4\l  %270 = add nuw i32 %179, 4\l  %271 = icmp ult i32 %270, %9\l  br i1 %271, label %177, label %272, !llvm.loop !13\l|{<s0>T|<s1>F}}"];
	Node0xfd3eb0:s0 -> Node0xfd3eb0;
	Node0xfd3eb0:s1 -> Node0xfd3f00;
	Node0xfd3f00 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#eed0c070",label="{%272:\l272:                                              \l  %273 = ptrtoint double* %266 to i64\l  %274 = add i64 %273, %22\l  %275 = inttoptr i64 %274 to double*\l  %276 = ptrtoint double* %267 to i64\l  %277 = add i64 %276, %22\l  %278 = inttoptr i64 %277 to double*\l  %279 = ptrtoint double* %268 to i64\l  %280 = add i64 %279, %22\l  %281 = inttoptr i64 %280 to double*\l  %282 = ptrtoint double* %269 to i64\l  %283 = add i64 %282, %22\l  %284 = inttoptr i64 %283 to double*\l  %285 = add nuw nsw i32 %170, 1\l  %286 = icmp eq i32 %285, %167\l  br i1 %286, label %287, label %168, !llvm.loop !14\l|{<s0>T|<s1>F}}"];
	Node0xfd3f00:s0 -> Node0xfd3f50;
	Node0xfd3f00:s1 -> Node0xfd3e60;
	Node0xfd3f50 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#9abbff70",label="{%287:\l287:                                              \l  call void @free(i8* noundef %42) #12\l  br label %288\l}"];
	Node0xfd3f50 -> Node0xfd3fa0;
	Node0xfd3fa0 [shape=record,color="#3d50c3ff", style=filled, fillcolor="#b2ccfb70",label="{%288:\l288:                                              \l  ret void\l}"];
}
